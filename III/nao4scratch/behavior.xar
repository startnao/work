<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="RightBumperPressed desc" id="4" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="70.7107">
                        <Box name="SocketServer" id="1" localization="8" tooltip='Waits for a network connection and command of type &quot;uid:cmd:param1:.. .:paramN&quot;. Outputs the command as string array. Allows blocking commands to send back finish notification.' x="242" y="27">
                            <bitmap>media/images/box/interaction/sound_location.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import socket
import base64

class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.listenSocket=None
        self.connectedSocket=None
        self.doingUnload=False

        self.avd = None
        self.strMyClientName = None
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        self.connectToCamera()
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    # Handles a single connection by receiving a message and decomposing it into fields,
    # which are then sent to an box output.
    #
    # Format incoming command string: "uid#command#param1#param2#...#paramN$",
    # where
    #     $ is the end of command line token,
    #
    # Format of the outgoing command array:
    #     String[uid,command,param1,param2,...,paramN]
    #
    def handleConnection(self):

        total_data=""

        try:
            while True:
                data = self.connectedSocket.recv(1)
                if not data:
                    self.logger.info("Socket "+str(self.connectedSocket)+" closed by peer.")
                    self.onDisconnect()
                    break

                if data=='$':
                    self.logger.info('Execute:'+total_data)

                    # Convert the command string to an array of strings. We use an array instead of separate output
                    # signals to avoid race conditions on the 10 different signals (and it makes handling of the command
                    # string more easy)
                    self.command( total_data.strip(' \t\n\r').split('#') )

                    total_data=""

                else:
                    if len(total_data)<255:  # data buffer limitation
                        total_data += data

        except Exception as ex:
            self.onDisconnect()
            self.logger.info("Exception while listening on socket "+str(self.connectedSocket)+", close connection! ")
            self.logger.info(ex)

        try:
            self.connectedSocket.close();
        except:
            pass

        self.connectedSocket=None
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    # Starts the TCP/IP listener on the configured port and delegates the connection to a
    # handler. no multiple connections supported so far to avoid complicating things with
    # multi-threading and synchronised management data.
    #
    def onInput_onStart(self):

        while True:

            # Open port for listening
            try:
                self.logger.info("Listening on port "+str(self.getParameter("port"))+" allowing 1 concurrent connection.")

                self.listenSocket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                self.listenSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                self.listenSocket.bind(("",self.getParameter("port")))
                self.listenSocket.listen(1)
                self.connectedSocket,address=self.listenSocket.accept()  # -> waiting for incoming connection

            except Exception as ex:
                # Very probaly an UNLOAD triggered by stopping the behaviour
                if self.doingUnload==False:
                    self.onUnload()  # |_ don't call it twice
                break

            # Handle incoming connection
            self.onConnect()
            self.logger.info('Connected to '+str(address)+"/"+str(self.connectedSocket))

            self.handleConnection()

        # |_ while True
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    # Stop the socket server box.  Closes all sockets and set the onStop output.
    #
    def onUnload(self):
        self.logger.info('Unloading: closing all sockets')

        self.doingUnload=True

        try:
            self.connectedSocket.shutdown(socket.SHUT_RDWR)
            self.connectedSocket.close()
        except:
            pass

        try:
            self.listenSocket.shutdown(socket.SHUT_RDWR)
            self.listenSocket.close()
        except:
            pass

        self.connectedSocket=None
        self.listenSocket=None

        self.disconnectFromCamera()
        self.avd = None
        self.strMyClientName = None

        self.onStopped()
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    # External signal forcing to stop the box.
    #
    def onInput_onStop(self):
        self.onUnload()
        #~ it is recommended to call onUnload of this box in a onStop method,
        # as the code written in onUnload is used to stop the box as well
        pass


    # ------------------------------------------------------------------------------------------------------------------------------
    # External signal when the blocking command has been finished. We need to notify the
    # client by sending back the UID of the command.
    #
    # Format:  "UID#end$"
    #
    def onInput_onCommandFinished(self,cmd):
        try:
            if cmd[1] == 'camera':
                self.connectedSocket.sendall(self.getImageFromCamera())

            self.connectedSocket.sendall(cmd[0]+"#end$")

        except Exception as ex:
            self.logger.warn("Unable to send back command complete notification")
            self.logger.warn(ex)

        pass


    def connectToCamera(self):
        self.log("STARTNAO: connecting to camera...")

        try:
            self.avd = ALProxy("ALVideoDevice")

            self.strMyClientName = self.avd.subscribeCamera(
                # Name              # CameraNum     # Resolution    # Colorspace        # FPS
                self.getName(),     0,              1,              11,                 5
            )

            self.log("STARTNAO: connected to camera")
        except BaseException, err:
            self.log("STARTNAO: error connecting to camera: %s" % err)


    def disconnectFromCamera(self):
        self.log("STARTNAO: disconnecting from camera...")

        try:
            self.avd.unsubscribe( self.strMyClientName )
        except BaseException, err:
            self.log("STARTNAO: error disconnecting from camera: %s" % err)

        self.log("STARTNAO: disconnected from camera")


    def getImageFromCamera(self):
        self.log("STARTNAO: getting camera image...")

        try:
            dataImage = self.avd.getImageRemote(self.strMyClientName)
            return base64.b64encode(dataImage[6])
        except BaseException, err:
            self.log("STARTNAO: error getting camera image: %s" % err)

        return None]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="onCommandFinished" type="3" type_size="10" nature="1" inner="0" tooltip="The (blocking) command that just finished execution. Will be reported back to the client." id="4" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="onConnect" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="onDisconnect" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Parameter name="port" inherits_from_parent="0" content_type="1" value="8080" default_value="8080" min="100" max="65000" tooltip="" id="9" />
                        </Box>
                        <Box name="TestCmd" id="7" localization="8" tooltip="Enter tooltip here" x="112" y="647">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box

        s=["1","sit","hi","hello"]
        self.log("SEND TEST OUTPUT:"+str(s));
        self.output(s)
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="output" type="3" type_size="10" nature="2" inner="0" tooltip="" id="5" />
                        </Box>
                        <Box name="Say" id="2" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="786" y="45">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Scratch behaviour connected ",
			"French" : " Scratch Connection ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[Scratch behaviour connected]]>
</english>
                                                    <french>
                                                        <![CDATA[Scratch Connection]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Say" id="5" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="803" y="153">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Scratch behaviour disconnected ",
			"French" : " Scratch déco ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[Scratch behaviour disconnected]]>
</english>
                                                    <french>
                                                        <![CDATA[Scratch déco]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>2</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Animantions 1" id="13" localization="8" tooltip="Animation collection, part 1" x="262" y="411">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onCommand" type="3" type_size="10" nature="2" inner="0" tooltip="" id="2" />
                            <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="100">
                                            <Box name="IfCmdThenOut" id="4" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="570" y="18">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="sitdown" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Say" id="6" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="566" y="220">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " sitdown. blocking command. Simulate waiting. The preferred way to get the length of any python object is to pass it as an argument to the len function. Internally, python will then try to call the special len method of the object that was passed. ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <english>
                                                                            <![CDATA[sitdown. blocking command. Simulate waiting. The preferred way to get the length of any python object is to pass it as an argument to the len function. Internally, python will then try to call the special len method of the object that was passed.]]>
</english>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="WaitFor" id="8" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="830" y="110">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="10" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="570" y="452">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="standup" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Say" id="11" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="823" y="739">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " standup. blocking command. Simulate waiting. The preferred way to get the length of any python object is to pass it as an argument to the len function. Internally, python will then try to call the special len method of the object that was passed. ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <english>
                                                                            <![CDATA[standup. blocking command. Simulate waiting. The preferred way to get the length of any python object is to pass it as an argument to the len function. Internally, python will then try to call the special len method of the object that was passed.]]>
</english>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="WaitFor" id="12" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="817" y="541">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="1227" y="669">
                                                <bitmap>media/images/box/movement/stand.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="StandUpBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="Sit Down" id="2" localization="8" tooltip="the robot tries to sit down from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="829" y="295">
                                                <bitmap>media/images/box/movement/sit_ground.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in sitting down." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to sit down after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="SitDownBehavior">
                                                        <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                            <Diagram>
                                                                <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="371" y="101">
                                                                    <bitmap>media/images/box/box-diagram.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                                    <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                                    <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                                    <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Sit" default_value="Sit" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                                        <Choice value="Crouch" />
                                                                        <Choice value="LyingBack" />
                                                                        <Choice value="LyingBelly" />
                                                                        <Choice value="Sit" />
                                                                        <Choice value="SitRelax" />
                                                                        <Choice value="StandInit" />
                                                                        <Choice value="Stand" />
                                                                        <Choice value="StandZero" />
                                                                    </Parameter>
                                                                    <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="100" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                                    <Resource name="All motors" type="Lock" timeout="0" />
                                                                    <Resource name="Stiffness" type="Lock" timeout="0" />
                                                                </Box>
                                                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                                                                <Link inputowner="0" indexofinput="5" outputowner="7" indexofoutput="5" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="3" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="590" y="921">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="moveforward" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="WaitFor" id="7" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="852" y="1012">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="13" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="626" y="1316">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="movebackward" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="WaitFor" id="14" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="855" y="1493">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="15" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="613" y="1883">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="turnleft" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="WaitFor" id="16" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="842" y="2060">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="avancer" id="5" localization="8" tooltip="" x="858" y="1147">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        motionProxy = ALProxy("ALMotion")
        motionProxy.walkTo(0.2,0.0,0.0)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the bo]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="reculer" id="9" localization="8" tooltip="" x="863" y="1622">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        motionProxy = ALProxy("ALMotion")
        motionProxy.walkTo(-0.2,0.0,0.0)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the bo]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="rotationLeft" id="17" localization="8" tooltip="" x="855" y="2172">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        motionProxy = ALProxy("ALMotion")
        motionProxy.walkTo(0.0,0.0,1.5707963268)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the bo]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="18" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="645" y="2419">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="turnright" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="WaitFor" id="19" localization="8" tooltip="After a received command, starts the execution notifies the outside world when the external command has finished execution." x="874" y="2596">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        self.command=[]
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # Command received. Starts the execution and internally stores the command string.
    # onExecuted should be called when the external command has finished execution.
    #
    def onInput_onCommand(self, cmd):
        self.command=cmd
        self.execute()
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # External command has finished execution. Signal this to the waiting outside world.
    #
    def onInput_onExecuted(self):
        self.commandFinished(self.command)
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Input name="onExecuted" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Output name="commandFinished" type="3" type_size="10" nature="2" inner="0" tooltip="Signal sent when controlled behavior is finished. It contains the entire command string." id="4" />
                                                <Output name="execute" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                            </Box>
                                            <Box name="rotationRight" id="20" localization="8" tooltip="" x="887" y="2708">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        motionProxy = ALProxy("ALMotion")
        motionProxy.walkTo(0.0,0.0,-1.5707963268)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the bo]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="IfCmdThenOut (1)" id="21" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="665" y="2887">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="camera" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Link inputowner="8" indexofinput="2" outputowner="4" indexofoutput="9" />
                                            <Link inputowner="8" indexofinput="3" outputowner="6" indexofoutput="4" />
                                            <Link inputowner="12" indexofinput="2" outputowner="10" indexofoutput="9" />
                                            <Link inputowner="12" indexofinput="3" outputowner="11" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="12" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="3" outputowner="8" indexofoutput="4" />
                                            <Link inputowner="1" indexofinput="2" outputowner="12" indexofoutput="5" />
                                            <Link inputowner="12" indexofinput="3" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="8" indexofoutput="5" />
                                            <Link inputowner="8" indexofinput="3" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="9" />
                                            <Link inputowner="0" indexofinput="3" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="14" indexofinput="2" outputowner="13" indexofoutput="9" />
                                            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="16" indexofinput="2" outputowner="15" indexofoutput="9" />
                                            <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="16" indexofoutput="4" />
                                            <Link inputowner="7" indexofinput="3" outputowner="5" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="5" />
                                            <Link inputowner="9" indexofinput="2" outputowner="14" indexofoutput="5" />
                                            <Link inputowner="14" indexofinput="3" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="5" />
                                            <Link inputowner="16" indexofinput="3" outputowner="17" indexofoutput="4" />
                                            <Link inputowner="19" indexofinput="2" outputowner="18" indexofoutput="9" />
                                            <Link inputowner="20" indexofinput="2" outputowner="19" indexofoutput="5" />
                                            <Link inputowner="19" indexofinput="3" outputowner="20" indexofoutput="4" />
                                            <Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="19" indexofoutput="4" />
                                            <Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="21" indexofoutput="9" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="General 1" id="4" localization="8" tooltip="General command collection, part 1" x="455" y="411">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onCommand" type="3" type_size="10" nature="2" inner="0" tooltip="" id="2" />
                            <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="3" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram scale="50">
                                            <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="416" y="46">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="9" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="271" y="44">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="say" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="IfCmdThenOut" id="1" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="270" y="217">
                                                <bitmap>media/images/box/interaction/choice.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                                                <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                                                <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                                                <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="motor" default_value="say" custom_choice="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="Motor On/Off" id="2" localization="8" tooltip="Stiffen or loosen all motors." x="755" y="199">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        pass

    def onInput_onSet(self):
        if( self.getParameter("Action") == "On" ):
            stiffness = 1
        else:
            stiffness = 0
        self.motion.post.stiffnessInterpolation("Body", stiffness, 0.1)
        time.sleep(0.1)
        self.onReady() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, all motors are stiffened or loosened." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when it is done." id="3" />
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="On" default_value="On" custom_choice="0" tooltip="Choose if you want to stiffen (On) or loosen (Off) all motors." id="4">
                                                    <Choice value="Off" />
                                                    <Choice value="On" />
                                                </Parameter>
                                            </Box>
                                            <Box name="If" id="4" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="438" y="219">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onData" type="0" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" />
                                                <Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" />
                                                <Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" />
                                                <Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="≠" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5">
                                                    <Choice value="&lt;" />
                                                    <Choice value="&lt; or =" />
                                                    <Choice value="=" />
                                                    <Choice value="&gt; or =" />
                                                    <Choice value="&gt;" />
                                                    <Choice value="≠" />
                                                </Parameter>
                                                <Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="off" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" />
                                            </Box>
                                            <Box name="Motor On/Off" id="5" localization="8" tooltip="Stiffen or loosen all motors." x="836" y="399">
                                                <bitmap>media/images/box/movement/stiffness.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        pass

    def onInput_onSet(self):
        if( self.getParameter("Action") == "On" ):
            stiffness = 1
        else:
            stiffness = 0
        self.motion.post.stiffnessInterpolation("Body", stiffness, 0.1)
        time.sleep(0.1)
        self.onReady() #~ activate output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, all motors are stiffened or loosened." id="2" />
                                                <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when it is done." id="3" />
                                                <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Off" default_value="On" custom_choice="0" tooltip="Choose if you want to stiffen (On) or loosen (Off) all motors." id="4">
                                                    <Choice value="Off" />
                                                    <Choice value="On" />
                                                </Parameter>
                                            </Box>
                                            <Box name="Say" id="6" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="622" y="181">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Motor On ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <english>
                                                                            <![CDATA[Motor On]]>
</english>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Box name="Say" id="7" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="616" y="302">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                                                <Timeline enable="0">
                                                    <BehaviorLayer name="behavior_layer1">
                                                        <BehaviorKeyframe name="keyframe1" index="1">
                                                            <Diagram>
                                                                <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                                    <bitmap>media/images/box/interaction/say.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                                    </script>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                                    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                                    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                                    <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                                    <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                                </Box>
                                                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                                    <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                                    <script language="4">
                                                                        <content>
                                                                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " Motor off ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                                    </script>
                                                                    <pluginContent>
                                                                        <chinese>
                                                                            <![CDATA[你好]]>
</chinese>
                                                                        <english>
                                                                            <![CDATA[Motor off]]>
</english>
                                                                        <french>
                                                                            <![CDATA[Bonjour]]>
</french>
                                                                        <german>
                                                                            <![CDATA[Hallo]]>
</german>
                                                                        <italian>
                                                                            <![CDATA[Ciao]]>
</italian>
                                                                        <japanese>
                                                                            <![CDATA[こんにちは]]>
</japanese>
                                                                        <korean>
                                                                            <![CDATA[안녕하세요]]>
</korean>
                                                                        <portuguese>
                                                                            <![CDATA[Olá]]>
</portuguese>
                                                                        <brazilian>
                                                                            <![CDATA[Olá]]>
</brazilian>
                                                                        <spanish>
                                                                            <![CDATA[Hola]]>
</spanish>
                                                                        <arabic>
                                                                            <![CDATA[مرحبا]]>
</arabic>
                                                                        <polish>
                                                                            <![CDATA[Cześć]]>
</polish>
                                                                        <czech>
                                                                            <![CDATA[Ahoj]]>
</czech>
                                                                        <dutch>
                                                                            <![CDATA[Hallo]]>
</dutch>
                                                                        <danish>
                                                                            <![CDATA[Hej]]>
</danish>
                                                                        <finnish>
                                                                            <![CDATA[Hei]]>
</finnish>
                                                                        <swedish>
                                                                            <![CDATA[Hallå]]>
</swedish>
                                                                        <russian>
                                                                            <![CDATA[Привет]]>
</russian>
                                                                        <turkish>
                                                                            <![CDATA[Merhaba]]>
</turkish>
                                                                        <language>1</language>
                                                                    </pluginContent>
                                                                    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                                    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                                    <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                                                </Box>
                                                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                                            </Diagram>
                                                        </BehaviorKeyframe>
                                                    </BehaviorLayer>
                                                </Timeline>
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="4" />
                                            <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="2" outputowner="4" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Stand Up" id="3" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="277" y="636">
                            <bitmap>media/images/box/movement/stand.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="StandUpBehavior">
                                    <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                            <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="327" y="93">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                    <Choice value="Crouch" />
                                                    <Choice value="LyingBack" />
                                                    <Choice value="LyingBelly" />
                                                    <Choice value="Sit" />
                                                    <Choice value="SitRelax" />
                                                    <Choice value="StandInit" />
                                                    <Choice value="Stand" />
                                                    <Choice value="StandZero" />
                                                </Parameter>
                                                <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                <Resource name="All motors" type="Lock" timeout="0" />
                                                <Resource name="Stiffness" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="All motors" type="Lock" timeout="0" />
                        </Box>
                        <Box name="IfCmdThenOut" id="6" localization="8" tooltip='If the received command matches the configured one, all outputs are set accordingly, otherwise only the &quot;isNotCommand() is kicked.' x="690" y="407">
                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):

    # ------------------------------------------------------------------------------------------------------------------------------
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onLoad(self):
        #~ puts code for box initialization here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    # ------------------------------------------------------------------------------------------------------------------------------
    # If the received command matches the configured one, all outputs are set accordingly,
    # otherwise only the "isNotCommand() is kicked.
    #
    def onInput_onCommand(self, cmd):

        try:
            ifCommand=self.getParameter("ifCommand")
            uid=cmd[0]
            command=cmd[1]

            if command==ifCommand:

                self.logger.info("Command ["+command+"] with UID=["+uid+"] executed")
                self.command(cmd)
                self.isCommand()

                if len(cmd)>=3: self.param1(cmd[2])
                if len(cmd)>=4: self.param2(cmd[3])
                if len(cmd)>=5: self.param3(cmd[4])
                if len(cmd)>=6: self.param4(cmd[5])

            else:
                self.isNotCommand()

        except Exception as ex:
            # Likely a bug with unexpected array size (not number of arguments as expected)
            self.logger.error(ex)
            pass

        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onCommand" type="3" type_size="10" nature="1" inner="0" tooltip="" id="2" />
                            <Output name="param3" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" />
                            <Output name="param1" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Output name="param4" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="param2" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="isCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="isNotCommand" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="command" type="3" type_size="10" nature="2" inner="0" tooltip="" id="9" />
                            <Parameter name="ifCommand" inherits_from_parent="0" content_type="3" value="stop" default_value="say" custom_choice="0" tooltip="" id="10" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" />
                        <Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="8" />
                        <Link inputowner="13" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="1" indexofinput="4" outputowner="13" indexofoutput="3" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="1" indexofinput="4" outputowner="4" indexofoutput="3" />
                        <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="6" />
                        <Link inputowner="0" indexofinput="5" outputowner="6" indexofoutput="9" />
                        <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="3" outputowner="0" indexofoutput="4" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
